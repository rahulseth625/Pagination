{"version":3,"sources":["logo.svg","Component/Dashboard.js","Component/Customers.js","App.js","reportWebVitals.js","index.js"],"names":["Dashboard","bidsData","console","log","Customers","props","useState","data","customerList","setCustomerList","selected","setSelected","classes","makeStyles","table","minWidth","useStyles","page","setPage","rowsPerPage","setRowsPerPage","setBids","emptyRows","Math","min","length","sort","a","b","max","apply","bids","map","x","amount","useEffect","axios","get","then","response","statusText","alert","TableContainer","component","Paper","Table","className","TableHead","TableRow","TableCell","align","onClick","TableBody","slice","row","index","Link","to","handleClick","scope","firstname","lastname","avatarUrl","email","phone","hasPremium","toString","style","height","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","target","value","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfa72fbf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\r\n\r\nconst Dashboard = ({ bidsData }) => {\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            \r\n            ---------{console.log(bidsData)}\r\n            {bidsData}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard","import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport '../Css/Customer.css';\r\nimport '../Css/Toggle.css';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Dashboard from \"./Dashboard\";\r\n\r\n\r\nconst Customers = (props) => {\r\n\r\n    const [customerList, setCustomerList] = useState({\r\n        data: [],\r\n    })\r\n\r\n    const [selected, setSelected] = useState(false);\r\n\r\n    const useStyles = makeStyles({\r\n        table: {\r\n            minWidth: 650\r\n        }\r\n    });\r\n\r\n    const classes = useStyles();\r\n    \r\n    const [page, setPage] = useState(0);\r\n\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = event => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const [bidsData, setBids] = useState();\r\n\r\n    const handleClick = (row) => {\r\n            setBids(row.bids);\r\n    }\r\n\r\n    //console.log (bids)\r\n\r\n    const emptyRows =\r\n        rowsPerPage - Math.min(rowsPerPage, customerList.data.length - page * rowsPerPage);\r\n\r\n\r\n    const customerLists = () => {\r\n        axios.get('https://intense-tor-76305.herokuapp.com/merchants')\r\n            .then((response) => {\r\n                if (response.statusText === 'OK') {\r\n                    setCustomerList(response);\r\n                    //setBids(row);\r\n                } else {\r\n                    return alert('something went wrong');\r\n                }\r\n            })\r\n    }\r\n\r\n    customerList.data.sort((a, b) => {\r\n        if (Math.max.apply(null, a.bids.map(x => x.amount)) < Math.max.apply(null, b.bids.map(x => x.amount))) {\r\n            return -1;\r\n        }\r\n        if (Math.min.apply(null, a.bids.map(x => x.amount)) > Math.min.apply(null, b.bids.map(x => x.amount))) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    const toggleSelected = () => {\r\n        setSelected(!selected);\r\n        // setCustomerList({\r\n        //     data: Array.prototype.reverse.call(customerList.data)\r\n        // })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        customerLists();\r\n        //handleClick();\r\n    }, []\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Customer Name</TableCell>\r\n                            <TableCell align=\"right\">Email</TableCell>\r\n                            <TableCell align=\"right\">Phone</TableCell>\r\n                            <TableCell align=\"right\">Premium</TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <div className=\"toggle-container\" onClick={toggleSelected}>\r\n                                    <div className={`dialog-button ${selected ? \"\" : \"disabled\"}`}>\r\n                                        {selected ? \"Min\" : \"Max\"}\r\n                                    </div>\r\n                                </div>\r\n                                        Bids\r\n                        </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {customerList.data\r\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                            .map((row, index) => (\r\n                                <TableRow key={index} \r\n                                    component={Link} to=\"/dashboard\"\r\n                                    onClick={() => handleClick(row)}\r\n                                    >\r\n                                    <TableCell component=\"th\" scope=\"row\" className=\"withprewrap\">\r\n                                        {row.firstname} {row.lastname}\r\n                                        {'\\n'}\r\n                                          avatar : {row.avatarUrl}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">{row.email}</TableCell>\r\n                                    <TableCell align=\"right\">{row.phone}</TableCell>\r\n                                    <TableCell align=\"right\">{row.hasPremium.toString()}</TableCell>\r\n                                    <TableCell align=\"right\"> {selected ? Math.min.apply(null, row.bids.map(x => x.amount))\r\n                                        : Math.max.apply(null, row.bids.map(x => x.amount))\r\n                                    }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        {emptyRows > 0 && (\r\n                            <TableRow style={{ height: 53 * emptyRows }}>\r\n                                <TableCell colSpan={6} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={customerList.data.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </TableContainer>\r\n            {/* {console.log(bids)} */}\r\n            <Dashboard bidsData={bidsData} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Customers;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Customers from './Component/Customers';\nimport Dashboard from './Component/Dashboard';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n <Router>\n      <Switch>\n        <Route component={Customers} path=\"/\" exact />\n        <Route component={Dashboard} path=\"/dashboard\" exact />\n        <Route path=\"*\" component={Customers} />\n      </Switch>\n    </Router>      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}